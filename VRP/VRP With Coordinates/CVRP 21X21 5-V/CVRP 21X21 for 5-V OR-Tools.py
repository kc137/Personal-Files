"""Capacited Vehicles Routing Problem (CVRP)."""

from ortools.constraint_solver import routing_enums_pb2
from ortools.constraint_solver import pywrapcp


def create_data_model():
    """Stores the data for the problem."""
    data = {}
    data['distance_matrix'] = [[0,
      71,
      47,
      51,
      79,
      47,
      61,
      74,
      55,
      44,
      41,
      52,
      44,
      59,
      40,
      71,
      69,
      52,
      94,
      101,
      46],
     [71,
      0,
      32,
      120,
      104,
      25,
      94,
      78,
      92,
      97,
      56,
      120,
      82,
      129,
      77,
      11,
      137,
      78,
      33,
      103,
      110],
     [47,
      32,
      0,
      97,
      74,
      23,
      90,
      52,
      86,
      84,
      53,
      99,
      50,
      101,
      45,
      27,
      108,
      75,
      48,
      79,
      80],
     [51,
      120,
      97,
      0,
      105,
      96,
      68,
      113,
      62,
      41,
      77,
      7,
      76,
      27,
      75,
      121,
      42,
      72,
      144,
      136,
      43],
     [79,
      104,
      74,
      105,
      0,
      95,
      139,
      30,
      134,
      120,
      113,
      110,
      35,
      88,
      38,
      95,
      84,
      130,
      102,
      35,
      63],
     [47,
      25,
      23,
      96,
      95,
      0,
      73,
      75,
      70,
      73,
      35,
      95,
      67,
      105,
      62,
      29,
      115,
      57,
      54,
      102,
      89],
     [61,
      94,
      90,
      68,
      139,
      73,
      0,
      132,
      6,
      27,
      38,
      63,
      105,
      93,
      101,
      101,
      108,
      16,
      126,
      160,
      96],
     [74,
      78,
      52,
      113,
      30,
      75,
      132,
      0,
      127,
      118,
      100,
      118,
      38,
      104,
      38,
      68,
      103,
      120,
      72,
      28,
      77],
     [55,
      92,
      86,
      62,
      134,
      70,
      6,
      127,
      0,
      21,
      36,
      57,
      99,
      87,
      95,
      99,
      101,
      16,
      124,
      155,
      90],
     [44,
      97,
      84,
      41,
      120,
      73,
      27,
      118,
      21,
      0,
      44,
      36,
      86,
      66,
      83,
      102,
      81,
      32,
      127,
      145,
      71],
     [41,
      56,
      53,
      77,
      113,
      35,
      38,
      100,
      36,
      44,
      0,
      74,
      80,
      94,
      76,
      63,
      106,
      23,
      88,
      129,
      86],
     [52,
      120,
      99,
      7,
      110,
      95,
      63,
      118,
      57,
      36,
      74,
      0,
      80,
      34,
      80,
      122,
      49,
      67,
      146,
      141,
      50],
     [44,
      82,
      50,
      76,
      35,
      67,
      105,
      38,
      99,
      86,
      80,
      80,
      0,
      66,
      5,
      76,
      67,
      95,
      91,
      61,
      40],
     [59,
      129,
      101,
      27,
      88,
      105,
      93,
      104,
      87,
      66,
      94,
      34,
      66,
      0,
      67,
      127,
      15,
      94,
      148,
      122,
      26],
     [40,
      77,
      45,
      75,
      38,
      62,
      101,
      38,
      95,
      83,
      76,
      80,
      5,
      67,
      0,
      72,
      69,
      91,
      87,
      62,
      42],
     [71,
      11,
      27,
      121,
      95,
      29,
      101,
      68,
      99,
      102,
      63,
      122,
      76,
      127,
      72,
      0,
      135,
      85,
      25,
      92,
      107],
     [69,
      137,
      108,
      42,
      84,
      115,
      108,
      103,
      101,
      81,
      106,
      49,
      67,
      15,
      69,
      135,
      0,
      108,
      154,
      119,
      28],
     [52,
      78,
      75,
      72,
      130,
      57,
      16,
      120,
      16,
      32,
      23,
      67,
      95,
      94,
      91,
      85,
      108,
      0,
      110,
      148,
      93],
     [94,
      33,
      48,
      144,
      102,
      54,
      126,
      72,
      124,
      127,
      88,
      146,
      91,
      148,
      87,
      25,
      154,
      110,
      0,
      90,
      126],
     [101,
      103,
      79,
      136,
      35,
      102,
      160,
      28,
      155,
      145,
      129,
      141,
      61,
      122,
      62,
      92,
      119,
      148,
      90,
      0,
      96],
     [46,
      110,
      80,
      43,
      63,
      89,
      96,
      77,
      90,
      71,
      86,
      50,
      40,
      26,
      42,
      107,
      28,
      93,
      126,
      96,
      0]]
    
    data['demands'] = [0,
     22,
     23,
     25,
     23,
     28,
     21,
     30,
     24,
     27,
     20,
     26,
     21,
     26,
     24,
     23,
     21,
     20,
     28,
     21,
     29]
    
    data['vehicle_capacities'] = [100, 100, 100, 100, 100]
    data['num_vehicles'] = 5
    data['depot'] = 0
    return data


def print_solution(data, manager, routing, solution):
    """Prints solution on console."""
    print(f'Objective: {solution.ObjectiveValue()}')
    total_distance = 0
    total_load = 0
    for vehicle_id in range(data['num_vehicles']):
        index = routing.Start(vehicle_id)
        plan_output = 'Route for vehicle {}:\n'.format(vehicle_id)
        route_distance = 0
        route_load = 0
        while not routing.IsEnd(index):
            node_index = manager.IndexToNode(index)
            route_load += data['demands'][node_index]
            plan_output += ' {0} Load({1}) -> '.format(node_index, route_load)
            previous_index = index
            index = solution.Value(routing.NextVar(index))
            route_distance += routing.GetArcCostForVehicle(
                previous_index, index, vehicle_id)
        plan_output += ' {0} Load({1})\n'.format(manager.IndexToNode(index),
                                                 route_load)
        plan_output += 'Distance of the route: {}m\n'.format(route_distance)
        plan_output += 'Load of the route: {}\n'.format(route_load)
        print(plan_output)
        total_distance += route_distance
        total_load += route_load
    print('Total distance of all routes: {}m'.format(total_distance))
    print('Total load of all routes: {}'.format(total_load))


def main():
    """Solve the CVRP problem."""
    # Instantiate the data problem.
    data = create_data_model()

    # Create the routing index manager.
    manager = pywrapcp.RoutingIndexManager(len(data['distance_matrix']),
                                           data['num_vehicles'], data['depot'])

    # Create Routing Model.
    routing = pywrapcp.RoutingModel(manager)


    # Create and register a transit callback.
    def distance_callback(from_index, to_index):
        """Returns the distance between the two nodes."""
        # Convert from routing variable Index to distance matrix NodeIndex.
        from_node = manager.IndexToNode(from_index)
        to_node = manager.IndexToNode(to_index)
        return data['distance_matrix'][from_node][to_node]

    transit_callback_index = routing.RegisterTransitCallback(distance_callback)

    # Define cost of each arc.
    routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)


    # Add Capacity constraint.
    def demand_callback(from_index):
        """Returns the demand of the node."""
        # Convert from routing variable Index to demands NodeIndex.
        from_node = manager.IndexToNode(from_index)
        return data['demands'][from_node]

    demand_callback_index = routing.RegisterUnaryTransitCallback(
        demand_callback)
    routing.AddDimensionWithVehicleCapacity(
        demand_callback_index,
        0,  # null capacity slack
        data['vehicle_capacities'],  # vehicle maximum capacities
        True,  # start cumul to zero
        'Capacity')

    # Setting first solution heuristic.
    search_parameters = pywrapcp.DefaultRoutingSearchParameters()
    search_parameters.first_solution_strategy = (
        routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC)
    search_parameters.local_search_metaheuristic = (
        routing_enums_pb2.LocalSearchMetaheuristic.GUIDED_LOCAL_SEARCH)
    search_parameters.time_limit.FromSeconds(1)

    # Solve the problem.
    solution = routing.SolveWithParameters(search_parameters)

    # Print solution on console.
    if solution:
        print_solution(data, manager, routing, solution)
    else:
        print("Bye bye")


if __name__ == '__main__':
    main()